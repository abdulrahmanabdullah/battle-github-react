{"version":3,"sources":["components/Battle.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","margin","padding","title","textAlign","grid","gridItem","display","flexDirection","justifyContent","alignItems","flexWrap","flex","gridInput","avatar","backgroundColor","borderRadius","playerHeader","width","playerInput","border","height","paper","paperItem","flexGrow","paddingLeft","Instructions","classes","className","variant","container","spacing","alignContent","item","xs","size","PlayerInput","state","username","handleSubmit","event","preventDefault","props","onSubmit","setState","target","value","handleChange","this","justify","sm","md","fullWidth","required","label","onChange","type","color","disabled","React","Component","InputHeader","style","Fragment","PlayerPreview","onReset","src","alt","onClick","Battle","playerOne","playerTwo","battle","id","player","marginTop","to","pathname","search"],"mappings":"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","file":"static/js/8.5d2be013.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  Container,\n  Typography,\n  makeStyles,\n  Grid,\n  TextField,\n  Button,\n  Paper,\n  Avatar\n} from '@material-ui/core';\nimport { FaUserFriends, FaFighterJet, FaTrophy } from 'react-icons/fa';\nimport { GoX } from 'react-icons/go';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: 0\n  },\n  title: {\n    margin: '0',\n    padding: '0',\n    textAlign: 'center'\n  },\n  grid: {\n    maxWidth: '100%',\n    margin: '25px  auto'\n  },\n  gridItem: {\n    maxWidth: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    flex: 2\n  },\n  gridInput: {\n    margin: '0',\n    padding: '15px'\n  },\n  avatar: {\n    display: 'block',\n    backgroundColor: 'rgba(0,0,0,0.08)',\n    padding: '40px',\n    borderRadius: '3px'\n  },\n  playerHeader: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  playerInput: {\n    width: '100%',\n    border: 'none',\n    height: 'auto'\n  },\n  paper: {\n    padding: '15px'\n  },\n  paperItem: {\n    flexGrow: '10',\n    paddingLeft: '10px'\n  }\n}));\n\nfunction Instructions() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.title} variant='h1'>\n        Instructions\n      </Typography>\n      {/* Grid for three icons  */}\n      <Grid\n        className={classes.grid}\n        container\n        spacing={10}\n        alignContent='center'\n      >\n        <Grid className={classes.gridItem} item xs={4}>\n          <Typography variant='h6' className={classes.title}>\n            Enter Two github users\n          </Typography>\n          <FaUserFriends size={140} className={classes.avatar} />\n        </Grid>\n        <Grid className={classes.gridItem} item xs={4}>\n          <Typography variant='h6' className={classes.title}>\n            Battle\n          </Typography>\n          <FaFighterJet size={140} className={classes.avatar} />\n        </Grid>\n        <Grid className={classes.gridItem} item xs={4}>\n          <Typography variant='h6' className={classes.title}>\n            See the winner\n          </Typography>\n          <FaTrophy size={140} className={classes.avatar} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nclass PlayerInput extends React.Component {\n  state = {\n    username: ''\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.username);\n    this.setState({ username: event.target.value });\n  };\n\n  handleChange = event => {\n    this.setState({ username: event.target.value });\n  };\n\n  render() {\n    const { username } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Grid container spacing={1} justify='center'>\n          <Grid item xs={12} sm={12} md>\n            <TextField\n              variant='outlined'\n              margin='none'\n              fullWidth\n              required\n              label='github username'\n              value={username}\n              onChange={this.handleChange}\n            />\n          </Grid>\n          <Grid item xs>\n            {username ? (\n              <Button type='submit' variant='contained' color='primary'>\n                Submit\n              </Button>\n            ) : (\n              <Button type='submit' color='primary' disabled>\n                submit\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n      </form>\n    );\n  }\n}\nfunction InputHeader() {\n  const style = useStyles();\n  return (\n    <React.Fragment>\n      <div className={style.playerHeader}>\n        <Typography variant='h4'>Player One</Typography>\n        <Typography variant='h4'>Player Two</Typography>\n      </div>\n    </React.Fragment>\n  );\n}\n\nfunction PlayerPreview({ avatar, username, onReset }) {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Paper className={classes.paper}>\n        <Grid container alignItems='center'>\n          <Grid item xs>\n            <Avatar>\n              <img\n                src={`https://github.com/${username}.png?size=200`}\n                alt={`Avatar for ${username}`}\n              />\n            </Avatar>\n          </Grid>\n          {/* Avatar  */}\n          {/* Username */}\n          <Grid item xs className={classes.paperItem}>\n            {username}\n          </Grid>\n          {/* reset Icon .  */}\n          <Grid item xs onClick={onReset}>\n            <GoX color='red' size={22} />\n          </Grid>\n        </Grid>\n      </Paper>\n    </React.Fragment>\n  );\n}\n\nPlayerPreview.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  onReset: PropTypes.func.isRequired\n};\n\nexport default class Battle extends Component {\n  state = {\n    playerOne: null,\n    playerTwo: null,\n    battle: false\n  };\n  onSubmit = (id, player) => {\n    this.setState({\n      [id]: player\n    });\n  };\n\n  onReset = id => {\n    this.setState({\n      [id]: null\n    });\n  };\n  render() {\n    const { playerOne, playerTwo } = this.state;\n    return (\n      <Container>\n        <Instructions />\n        <Typography variant='h3' style={{ textAlign: 'center' }}>\n          Players\n        </Typography>\n        <InputHeader />\n        <Grid container spacing={2}>\n          <Grid item xs>\n            {playerOne === null ? (\n              <PlayerInput\n                onSubmit={player => this.onSubmit('playerOne', player)}\n              />\n            ) : (\n              <PlayerPreview\n                username={playerOne}\n                avatar={playerOne}\n                onReset={() => this.onReset('playerOne')}\n              />\n            )}\n          </Grid>\n          <Grid item xs>\n            {playerTwo === null ? (\n              <PlayerInput\n                onSubmit={player => this.onSubmit('playerTwo', player)}\n              />\n            ) : (\n              <PlayerPreview\n                username={playerTwo}\n                avatar={playerTwo}\n                onReset={() => this.onReset('playerTwo')}\n              />\n            )}\n          </Grid>\n        </Grid>\n        {playerOne && playerTwo && (\n          <div\n            style={{ marginTop: '25px', textAlign: 'center', width: '100%' }}\n          >\n            <Link\n              to={{\n                pathname: '/battle/result',\n                search: `?playerOne=${playerOne}&playerTwo=${playerTwo}`\n              }}\n            >\n              <Button variant='contained'>Battle</Button>\n            </Link>\n          </div>\n        )}\n      </Container>\n    );\n  }\n}\n"],"sourceRoot":""}