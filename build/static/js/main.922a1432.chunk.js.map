{"version":3,"sources":["context/theme.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","Consumer","TProvider","Provider","TConsumer","lightTheme","createMuiTheme","palette","type","primary","deepPurple","background","paper","text","secondary","typography","fontFamily","join","h1","fontSize","breakpoints","up","h3","h4","h6","fontWeight","nightTheme","useStyle","makeStyles","theme","battle","flexGrow","textDecoration","color","tabs","height","item","marginLeft","activeStyle","Nav","classes","toggleDarkTheme","AppBar","position","Toolbar","Typography","variant","exact","to","className","Button","style","onClick","Popular","lazy","Battle","Results","App","state","setState","this","value","ThemeProvider","Container","maxWidth","CssBaseline","Suspense","fallback","path","component","render","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.922a1432.chunk.js","sourcesContent":["import React from 'react';\nimport { createMuiTheme } from '@material-ui/core';\nimport { deepPurple } from '@material-ui/core/colors';\n\nconst { Consumer, Provider } = React.createContext();\n\nexport const TProvider = Provider;\nexport const TConsumer = Consumer;\n\nexport const lightTheme = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: deepPurple,\n    background: {\n      paper: '#fff'\n    },\n    text: {\n      primary: '#000',\n      secondary: '#5D5D5D'\n    },\n    typography: {\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"'\n      ].join(',')\n    }\n  }\n});\n// responsive for Typography\nlightTheme.typography.h1 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem'\n  },\n  [lightTheme.breakpoints.up('md')]: {\n    fontSize: '5rem'\n  }\n};\nlightTheme.typography.h3 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem'\n  },\n  [lightTheme.breakpoints.up('md')]: {\n    fontSize: '2.4rem'\n  }\n};\n\nlightTheme.typography.h4 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem'\n  },\n  [lightTheme.breakpoints.up('md')]: {\n    fontSize: '2.4rem'\n  }\n};\n\nlightTheme.typography.h6 = {\n  fontSize: '1.2rem',\n  fontWeight: 'normal',\n  '@media (min-width:600px)': {\n    fontSize: '1.2rem'\n  },\n  [lightTheme.breakpoints.up('md')]: {\n    fontSize: '1.2rem'\n  }\n};\nexport const nightTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n});\n\n// responsive for Typography\nnightTheme.typography.h1 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem'\n  },\n  [nightTheme.breakpoints.up('md')]: {\n    fontSize: '5rem'\n  }\n};\nnightTheme.typography.h3 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem'\n  },\n  [nightTheme.breakpoints.up('md')]: {\n    fontSize: '2.4rem'\n  }\n};\n\nnightTheme.typography.h4 = {\n  fontSize: '1.2rem',\n  '@media (min-width:600px)': {\n    fontSize: '1.5rem'\n  },\n  [nightTheme.breakpoints.up('md')]: {\n    fontSize: '2.4rem'\n  }\n};\n\nlightTheme.typography.h6 = {\n  fontSize: '1.2rem',\n  fontWeight: 'normal',\n  '@media (min-width:600px)': {\n    fontSize: '1.2rem'\n  },\n  [lightTheme.breakpoints.up('md')]: {\n    fontSize: '1.2rem'\n  }\n};\n","import React from 'react';\nimport { TConsumer } from '../context/theme';\nimport { NavLink } from 'react-router-dom';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  makeStyles\n} from '@material-ui/core';\n\nconst useStyle = makeStyles(theme => ({\n  battle: {\n    flexGrow: 2,\n    textDecoration: 'none',\n    color: '#fff'\n  },\n  tabs: {\n    height: '70px'\n  },\n  item: {\n    marginLeft: '5px',\n    textDecoration: 'none',\n    color: 'rgba(249, 246, 246, 0.27);'\n  }\n}));\n\nconst activeStyle = {\n  color: '#fff',\n  fontSize: '20px'\n};\nexport default function Nav() {\n  const classes = useStyle();\n  return (\n    <TConsumer>\n      {({ theme, toggleDarkTheme }) => (\n        <AppBar position='static'>\n          <Toolbar>\n            <Typography variant='h6'>\n              <NavLink\n                exact\n                to='/'\n                className={classes.item}\n                activeStyle={activeStyle}\n                color='inherit'\n              >\n                Popular Repository\n              </NavLink>\n            </Typography>\n            <Typography className={classes.battle} variant='h6'>\n              <NavLink\n                className={classes.item}\n                exact\n                to='/battle'\n                activeStyle={activeStyle}\n                color='inherit'\n              >\n                Battle\n              </NavLink>\n            </Typography>\n            <Button style={{ fontSize: '30px' }} onClick={toggleDarkTheme}>\n              {theme ? '‚òÄÔ∏è ' : 'üí°'}\n            </Button>\n          </Toolbar>\n        </AppBar>\n      )}\n    </TConsumer>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { TProvider, lightTheme, nightTheme } from './context/theme';\nimport Nav from './components/Nav';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Container, CssBaseline, ThemeProvider } from '@material-ui/core';\n\n// dynamic imports\nconst Popular = React.lazy(() => import('./components/Popular'));\nconst Battle = React.lazy(() => import('./components/Battle'));\nconst Results = React.lazy(() => import('./components/Results'));\n\nclass App extends React.Component {\n  state = {\n    theme: true,\n    toggleDarkTheme: () => {\n      this.setState(({ theme }) => ({\n        theme: !theme\n      }));\n    }\n  };\n\n  render() {\n    const { theme } = this.state;\n    return (\n      <Router>\n        <TProvider value={this.state}>\n          <ThemeProvider theme={theme ? lightTheme : nightTheme}>\n            <div>\n              <Container maxWidth='lg'>\n                <CssBaseline />\n                <Nav />\n                <React.Suspense fallback={<h1>Loading</h1>}>\n                  <Switch>\n                    <Route exact path='/' component={Popular} />\n                    <Route exact path='/battle' component={Battle} />\n                    <Route path='/battle/result' component={Results} />\n                    <Route render={() => <h1> 404 </h1>} />\n                  </Switch>\n                </React.Suspense>\n              </Container>\n            </div>\n          </ThemeProvider>\n        </TProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}